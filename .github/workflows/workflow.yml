name: Build & Deploy Multi-Arch Docker Image

on:
  workflow_call:
    outputs:
      digest:
        value: ${{ jobs.merge.outputs.digest }}
    secrets:
      username:
        description: The username to use to authenticate with the Docker registry.
        required: true
      password:
        description: The password to use to authenticate with the Docker registry.
        required: true
      secrets:
        description: Raw secrets to pass to docker build as environment variables in key=value format (one per line).
        required: false
      secret-envs:
        description: Environment variables to passthrough to the docker build in key=envname format (one per line).
        required: false
      secret-files:
        description: Files to mount from the host machine into the docker build in key=filepath format (one per line).
        required: false
    inputs:
      github_ref:
        description: The Github ref to checkout. If not specified, defaults to the ref that triggered this workflow.
        type: string
        default: ""
        required: false
      registry:
        description: The hostname of the Docker registry as you would enter it for the `docker login` command.
        type: string
        required: false
      image-name:
        description: "The namespaced Docker image name. Example: `docker push -t ${registry}/${image_name}:latest`"
        type: string
        default: ${{ github.repository }}
        required: false
      context:
        description: The path to the Docker context to build.
        type: string
        default: "."
        required: false
      dockerfile:
        description: The absolute path to the Dockerfile to build.
        type: string
        default: "./Dockerfile"
        required: false
      build-args:
        description: Build Args to pass to the docker build in key=value format (one per line).
        type: string
        default: ""
        required: false
      tags:
        description: The tags to apply to the final multi-arch image. Uses the same format as docker/metadata-action.
        type: string
        default: ""
        required: true
      linux-arm-runner:
        description: The `runs-on` tag for the linux arm64 runner. Defaults to the Github standard runner.
        type: string
        required: false
        default: ubuntu-latest
      push:
        description: Whether to push the built images to the registry. Set to false to only refresh cache.
        type: boolean
        required: false
        default: true

env:
  DOCKER_REGISTRY: ${{ inputs.registry || vars.ARTIFACTORY_HOSTNAME }}

jobs:
  build:
    strategy:
      matrix:
        include:
          - runner: ${{ inputs.linux-arm-runner }}
            platform: linux/arm64
            arch: arm64
          - runner: ubuntu-latest
            platform: linux/amd64
            arch: amd64

    name: Docker Build (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.github_ref }}

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Repo
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
          build-args: ${{ inputs.build-args }}
          secrets: ${{ secrets.secrets }}
          secret-envs: ${{ secrets.secret-envs }}
          secret-files: ${{ secrets.secret-files }}
          outputs: |
            type=image,name=${{ env.DOCKER_REGISTRY }}/${{ inputs.image-name }},push=${{ inputs.push }},push-by-digest=true,name-canonical=true

      - name: Export digest
        run: |
          mkdir -p ${RUNNER_TEMP}/digests
          echo "${{ steps.build.outputs.digest }}" > ${RUNNER_TEMP}/digests/digest-${{ matrix.arch }}.txt

      - name: Upload Image Digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    if: ${{ inputs.push }}
    needs:
      - build

    name: Create and Push Docker Manifest Lists
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.fanciness.outputs.digest }}

    steps:
      - name: Download Image Digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Repo
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ inputs.image-name }}
          tags: ${{ inputs.tags }}

      # Setting up the imagetools args in a separate step, lets us leverage Github's `env` context to print out the command that will be run.
      - name: Setup args for Buildx imagetools
        run: |
          echo "IMAGETOOLS_TAGS=$(echo ${DOCKER_METADATA_OUTPUT_TAGS} | xargs -n1 printf '\-t %s ')" >> $GITHUB_ENV
          echo "IMAGETOOLS_SOURCES=$(cat ${RUNNER_TEMP}/digests/* | xargs -n1 printf '${{ env.DOCKER_REGISTRY }}/${{ inputs.image-name }}@%s ')" >> $GITHUB_ENV

      # `docker manifest create` has been deprecated and replaced by `docker buildx imagetools`.
      - name: Docker Build/Push Multi-Arch Image
        id: imagetools
        run: |
          set -o pipefail # Ensure step fails if `docker` command fails.
          docker buildx imagetools create --progress rawjson ${{ env.IMAGETOOLS_TAGS }} ${{ env.IMAGETOOLS_SOURCES }} 2>&1 | tee temp.json
          cat temp.json | jq --exit-status --compact-output --monochrome-output --slurp 'map(select(. | has("vertexes"))) | map(.vertexes) | flatten | map({"digest": .digest, "name": (.name | ltrimstr("[internal] pushing "))})' > output.json
          echo 'json<<JSON' >> $GITHUB_OUTPUT
          cat output.json >> $GITHUB_OUTPUT
          echo 'JSON' >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Fancy Outputs
        id: fanciness
        run: |
          THE_TAG=$(echo '${{ steps.imagetools.outputs.json }}' | jq --exit-status --raw-output 'map(.name) | .[0]')
          THE_DIGEST=$(docker buildx imagetools inspect $THE_TAG --format '{{. | json}}' | jq --raw-output '.manifest.digest')
          echo "digest=$THE_DIGEST" >> $GITHUB_OUTPUT

      - name: Summarize Job
        run: |
          echo "**Docker image digest:** ${{ steps.fanciness.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Tags" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo  "$DOCKER_METADATA_OUTPUT_TAGS" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
